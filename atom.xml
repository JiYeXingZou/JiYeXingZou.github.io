<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Izumi Sagiri</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://jiyexingzou.github.io/atom.xml" rel="self"/>
  
  <link href="https://jiyexingzou.github.io/"/>
  <updated>2025-04-27T12:16:23.434Z</updated>
  <id>https://jiyexingzou.github.io/</id>
  
  <author>
    <name>Izumi Sagiri</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用块的网络VGG</title>
    <link href="https://jiyexingzou.github.io/2025/04/25/%E4%BD%BF%E7%94%A8%E5%9D%97%E7%9A%84%E7%BD%91%E7%BB%9CVGG/"/>
    <id>https://jiyexingzou.github.io/2025/04/25/%E4%BD%BF%E7%94%A8%E5%9D%97%E7%9A%84%E7%BD%91%E7%BB%9CVGG/</id>
    <published>2025-04-25T11:44:10.000Z</published>
    <updated>2025-04-27T12:16:23.434Z</updated>
    
    <content type="html"><![CDATA[<p>VGG<br>能不能更深更大获得更好的精度<br>更多的全连接层<br>更多的卷积层<br>将卷积层组合成块<br><img src="/2025/04/25/%E4%BD%BF%E7%94%A8%E5%9D%97%E7%9A%84%E7%BD%91%E7%BB%9CVGG/image.png" alt="alt text"><br>深但窄效果更好<br>多个VGG块后接全连接层<br>不同次数的重复块得到不同的架构<br>VGG-16，VGG-19<br>更大更深的AlexNet<br>非常的占内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> d2l <span class="keyword">import</span> torch <span class="keyword">as</span> d2l</span><br><span class="line"></span><br><span class="line"><span class="comment"># VGG块的实现</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vgg_block</span>(<span class="params">num_convs, in_channels, out_channels</span>):</span><br><span class="line">    layers = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(num_convs):</span><br><span class="line">        layers.append(nn.Conv2d(in_channels, out_channels,</span><br><span class="line">                                kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>))</span><br><span class="line">        layers.append(nn.ReLU())</span><br><span class="line">        in_channels = out_channels</span><br><span class="line">    layers.append(nn.MaxPool2d(kernel_size=<span class="number">2</span>,stride=<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(*layers)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">conv_arch = ((<span class="number">1</span>, <span class="number">64</span>), (<span class="number">1</span>, <span class="number">128</span>), (<span class="number">2</span>, <span class="number">256</span>), (<span class="number">2</span>, <span class="number">512</span>), (<span class="number">2</span>, <span class="number">512</span>))</span><br><span class="line"></span><br><span class="line">    conv_blks = []</span><br><span class="line">    in_channels = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 卷积层部分</span></span><br><span class="line">    <span class="keyword">for</span> (num_convs, out_channels) <span class="keyword">in</span> conv_arch:</span><br><span class="line">        conv_blks.append(vgg_block(num_convs, in_channels, out_channels))</span><br><span class="line">        in_channels = out_channels</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nn.Sequential(</span><br><span class="line">        *conv_blks, nn.Flatten(),</span><br><span class="line">        <span class="comment"># 全连接层部分</span></span><br><span class="line">        nn.Linear(out_channels * <span class="number">7</span> * <span class="number">7</span>, <span class="number">4096</span>), nn.ReLU(), nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">        nn.Linear(<span class="number">4096</span>, <span class="number">4096</span>), nn.ReLU(), nn.Dropout(<span class="number">0.5</span>),</span><br><span class="line">        nn.Linear(<span class="number">4096</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">net = vgg(conv_arch)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;VGG&lt;br&gt;能不能更深更大获得更好的精度&lt;br&gt;更多的全连接层&lt;br&gt;更多的卷积层&lt;br&gt;将卷积层组合成块&lt;br&gt;&lt;img src=&quot;/2025/04/25/%E4%BD%BF%E7%94%A8%E5%9D%97%E7%9A%84%E7%BD%91%E7%BB%9CVGG</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>近期目标与反思</title>
    <link href="https://jiyexingzou.github.io/2024/11/25/%E8%BF%91%E6%9C%9F%E7%9B%AE%E6%A0%87%E4%B8%8E%E5%8F%8D%E6%80%9D/"/>
    <id>https://jiyexingzou.github.io/2024/11/25/%E8%BF%91%E6%9C%9F%E7%9B%AE%E6%A0%87%E4%B8%8E%E5%8F%8D%E6%80%9D/</id>
    <published>2024-11-25T12:49:44.000Z</published>
    <updated>2024-11-25T13:27:52.387Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新个人网站了，来冒个泡</p><p>还是渐渐走上了正轨</p><p>开始备赛，组好了队，甚至还有学长帮忙我哭死</p><p>反思：现在报的一些比赛还没有什么含金量，如果要面向就业需要打一些和嵌入式和ai相关的竞赛</p><p>放一张纱雾美图开心一下吧</p><p><img src="/2024/11/25/%E8%BF%91%E6%9C%9F%E7%9B%AE%E6%A0%87%E4%B8%8E%E5%8F%8D%E6%80%9D/74744256_p0_master1200.jpg" alt="前辈，那个我喜欢你！" title="前辈，那个我喜欢你！"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没更新个人网站了，来冒个泡&lt;/p&gt;
&lt;p&gt;还是渐渐走上了正轨&lt;/p&gt;
&lt;p&gt;开始备赛，组好了队，甚至还有学长帮忙我哭死&lt;/p&gt;
&lt;p&gt;反思：现在报的一些比赛还没有什么含金量，如果要面向就业需要打一些和嵌入式和ai相关的竞赛&lt;/p&gt;
&lt;p&gt;放一张纱雾美图开心一下吧&lt;/p&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>竞赛分享</title>
    <link href="https://jiyexingzou.github.io/2024/10/25/%E7%AB%9E%E8%B5%9B%E5%88%86%E4%BA%AB/"/>
    <id>https://jiyexingzou.github.io/2024/10/25/%E7%AB%9E%E8%B5%9B%E5%88%86%E4%BA%AB/</id>
    <published>2024-10-25T08:14:15.000Z</published>
    <updated>2024-10-25T09:43:05.558Z</updated>
    
    <content type="html"><![CDATA[<p>服创，计设，华为ICT大赛，蓝桥杯等比赛经验分享</p><h1 id="1-电子科技大学保研政策"><a href="#1-电子科技大学保研政策" class="headerlink" title="1. 电子科技大学保研政策"></a>1. 电子科技大学保研政策</h1><p>信软官网搜推免.</p><p>保研流程<br>排名百分之29左右<br>保研名额<br>科研经历</p><p>注意前五学期成绩排名<br>我还有3&#x2F;5的机会,抓住机会</p><p>保研综合测评成绩</p><h1 id="学科竞赛"><a href="#学科竞赛" class="headerlink" title="学科竞赛"></a>学科竞赛</h1><p>能力培养:编程能力,技术能力,系统能力</p><p>就业：百度之星，大疆robomaster，robocon，华为ICT大赛。<br>竞赛中提出的算法创新<br>知识产权，专利，论文.</p><p>完善的竞赛保障</p><p>国三才不会处于劣势</p><p>就业向:<br>高水平企业赞助硬核比赛</p><p>服创，计设，蓝桥，信安。ppt大赛<br>网挑：中国高校计算机大赛</p><p>服创项目投计算机设计大赛</p><p>嵌入式:全国大学生嵌入式芯片与系统设计大赛</p><p>蓝桥杯：电子赛难度低于软件赛</p><p>ppt大赛<br>逻辑是否落地，需求是否真实，吹的天花乱坠<br>正态分布 &#x3D; 高斯分布<br>算法创新，名字起的长一点。高大上</p><p>找人采访，比如找公安局的民警采访，<br>找公司让人签署合同，让别人感觉你的非常高级.</p><p>最重要的是要志同道合。</p><p>组队阶段保证志向，队友要负责，<br>确定方向是要保研</p><p>戴瑞婷老师！！！！</p><h2 id="组队"><a href="#组队" class="headerlink" title="组队"></a>组队</h2><p>开发技术需要覆盖:技术栈：前后端，算法，(硬件)</p><p>软实力需要覆盖：审美水平在线(及其重要),视频剪辑，外箱点的，擅长演讲的，细心的<br>没有覆盖这些怎么办呢？<br>    淘宝，小红书，咸鱼外包。<br>    每个组一定会有优势方案</p><p>去小红书找做ppt的。<br>个人建议不要负责躲雨两个项目。</p><h2 id="团队合作"><a href="#团队合作" class="headerlink" title="团队合作"></a>团队合作</h2><p>服创大赛命题，</p><p>尽量寒假内完成项目开发。前端做的很美观，精细.</p><p>算法，复现，改进，顶会高水平论文。</p><p>团队沟通<br>    每周开会</p><p>使用飞书知识库<br>    十分遍历的多人在线合作平台</p><p>多和指导老师，学长学姐沟通</p><h1 id="服创"><a href="#服创" class="headerlink" title="服创"></a>服创</h1><p>视频做的好<br>服务外包</p><p>有硬件是超级加分乡</p><h1 id="计设"><a href="#计设" class="headerlink" title="计设"></a>计设</h1><p>评委几乎没有懂计算机技术的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;服创，计设，华为ICT大赛，蓝桥杯等比赛经验分享&lt;/p&gt;
&lt;h1 id=&quot;1-电子科技大学保研政策&quot;&gt;&lt;a href=&quot;#1-电子科技大学保研政策&quot; class=&quot;headerlink&quot; title=&quot;1. 电子科技大学保研政策&quot;&gt;&lt;/a&gt;1. 电子科技大学保研政策&lt;/h1</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>编译原理实验2-递归下降语法分析</title>
    <link href="https://jiyexingzou.github.io/2024/10/25/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C2-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <id>https://jiyexingzou.github.io/2024/10/25/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E5%AE%9E%E9%AA%8C2-%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</id>
    <published>2024-10-25T01:32:09.000Z</published>
    <updated>2024-10-25T09:46:29.820Z</updated>
    
    <content type="html"><![CDATA[<p>关于icoding中的编译原理实验二</p><p>下面这是icoding所提供的头文件<br><code>rdlab2.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;node_type.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">yytokentype</span> &#123;</span></span><br><span class="line">num_INT = <span class="number">258</span>,</span><br><span class="line">num_FLOAT = <span class="number">259</span>,</span><br><span class="line"></span><br><span class="line">Y_ID = <span class="number">260</span>,</span><br><span class="line"></span><br><span class="line">Y_INT = <span class="number">261</span>,</span><br><span class="line">Y_VOID = <span class="number">262</span>,</span><br><span class="line">Y_CONST = <span class="number">263</span>,</span><br><span class="line">Y_IF = <span class="number">264</span>,</span><br><span class="line">Y_ELSE = <span class="number">265</span>,</span><br><span class="line">Y_WHILE = <span class="number">266</span>,</span><br><span class="line">Y_BREAK = <span class="number">267</span>,</span><br><span class="line">Y_CONTINUE = <span class="number">268</span>,</span><br><span class="line">Y_RETURN = <span class="number">269</span>,</span><br><span class="line"></span><br><span class="line">Y_ADD = <span class="number">270</span>,</span><br><span class="line">Y_SUB = <span class="number">271</span>,</span><br><span class="line">Y_MUL = <span class="number">272</span>,</span><br><span class="line">Y_DIV = <span class="number">273</span>,</span><br><span class="line">Y_MODULO = <span class="number">274</span>,</span><br><span class="line">Y_LESS = <span class="number">275</span>,</span><br><span class="line">Y_LESSEQ = <span class="number">276</span>,</span><br><span class="line">Y_GREAT = <span class="number">277</span>,</span><br><span class="line">Y_GREATEQ = <span class="number">278</span>,</span><br><span class="line">Y_NOTEQ = <span class="number">279</span>,</span><br><span class="line">Y_EQ = <span class="number">280</span>,</span><br><span class="line">Y_NOT = <span class="number">281</span>,</span><br><span class="line">Y_AND = <span class="number">282</span>,</span><br><span class="line">Y_OR = <span class="number">283</span>,</span><br><span class="line">Y_ASSIGN = <span class="number">284</span>,</span><br><span class="line"></span><br><span class="line">Y_LPAR = <span class="number">285</span>,</span><br><span class="line">Y_RPAR = <span class="number">286</span>,</span><br><span class="line">Y_LBRACKET = <span class="number">287</span>,</span><br><span class="line">Y_RBRACKET = <span class="number">288</span>,</span><br><span class="line">Y_LSQUARE = <span class="number">289</span>,</span><br><span class="line">Y_RSQUARE = <span class="number">290</span>,</span><br><span class="line">Y_COMMA = <span class="number">291</span>,</span><br><span class="line">Y_SEMICOLON = <span class="number">292</span>,</span><br><span class="line"></span><br><span class="line">Y_FLOAT = <span class="number">293</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">TokenType</span>&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">yytokentype</span> <span class="title">token</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line"><span class="type">int</span>ivalue;</span><br><span class="line"><span class="type">float</span>   fvalue;</span><br><span class="line"><span class="type">char</span>*svalue;</span><br><span class="line">&#125;attr;</span><br><span class="line">&#125;TokenType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">set_cur_tok_index</span><span class="params">(<span class="type">int</span> ind)</span>; <span class="comment">// 没用到</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_cur_tok_index</span><span class="params">()</span>; <span class="comment">// 没用到</span></span><br><span class="line">TokenType <span class="title function_">advance</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">extern</span> TokenType cur_token; <span class="comment">//这里引用了一个全局变量 cur_token</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///Non-terminator，不知道在哪用，没有用到</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Non_terminator</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ast</span> <span class="title">ast</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ast</span> *<span class="title">past</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">ast</span>&#123;</span></span><br><span class="line"><span class="type">int</span> ivalue;</span><br><span class="line"><span class="type">float</span> fvalue;</span><br><span class="line"><span class="type">char</span>* svalue;</span><br><span class="line">node_type nodeType;</span><br><span class="line">past left;</span><br><span class="line">past right;</span><br><span class="line">past if_cond;</span><br><span class="line">past next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 库提供的函数</span></span><br><span class="line">past <span class="title function_">rd_block</span><span class="params">()</span>;</span><br><span class="line">past <span class="title function_">rd_array_subscripts</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">past <span class="title function_">newAstNode</span><span class="params">()</span>;</span><br><span class="line">past <span class="title function_">newID</span><span class="params">(<span class="type">char</span>* value)</span>; <span class="comment">// 没用到</span></span><br><span class="line">past <span class="title function_">newInt</span><span class="params">(<span class="type">int</span> value)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要完成的函数</span></span><br><span class="line">past <span class="title function_">rd_call_paras</span><span class="params">()</span>;</span><br><span class="line">past <span class="title function_">rd_relexp</span><span class="params">()</span>;</span><br><span class="line">past <span class="title function_">rd_stmt</span><span class="params">()</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="1-节点分析"><a href="#1-节点分析" class="headerlink" title="1 节点分析"></a>1 节点分析</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//下面的ivalue，fvalue和svalue用于存储节点的值</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ast</span> <span class="title">ast</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">ast</span> *<span class="title">past</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">ast</span>&#123;</span></span><br><span class="line"><span class="type">int</span> ivalue; <span class="comment">// 这三个储存节点的值，如果只有操作符只能保存在ivalue中</span></span><br><span class="line"><span class="type">float</span> fvalue;</span><br><span class="line"><span class="type">char</span>* svalue;</span><br><span class="line">node_type nodeType; <span class="comment">// 节点类型</span></span><br><span class="line">past left; <span class="comment">//左子树</span></span><br><span class="line">past right; <span class="comment">//右子树</span></span><br><span class="line">past if_cond; <span class="comment">// if_cond 仅限于 if 语句中的条件</span></span><br><span class="line">past next; <span class="comment">// 并列关系</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-NodeType"><a href="#2-NodeType" class="headerlink" title="2 NodeType"></a>2 NodeType</h1><p>这些node_type是不同类型的节点类型（声明、表达式、语句等）枚举值，简要描述：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Expression Kinds（表达式类型）:</span><br><span class="line">CALL_EXPR: 函数调用表达式</span><br><span class="line">BLOCK_EXPR: 块表达式</span><br><span class="line">INTEGER_LITERAL: 整数文字</span><br><span class="line">FLOATING_LITERAL: 浮点数文字</span><br><span class="line">IMAGINARY_LITERAL: 虚数文字</span><br><span class="line">STRING_LITERAL: 字符串文字</span><br><span class="line">CHARACTER_LITERAL: 字符文字</span><br><span class="line">UNARY_OPERATOR: 一元操作符表达式</span><br><span class="line">ARRAY_SUBSCRIPT_EXPR: 数组下标表达式</span><br><span class="line">BINARY_OPERATOR: 二元操作符表达式</span><br><span class="line">Statement Kinds（语句类型）:</span><br><span class="line">COMPOUND_STMT: 复合语句（块）</span><br><span class="line">IF_STMT: if 语句</span><br><span class="line">WHILE_STMT: while 语句</span><br><span class="line">FOR_STMT: for 语句</span><br><span class="line">CONTINUE_STMT: continue 语句</span><br><span class="line">BREAK_STMT: break 语句</span><br><span class="line">RETURN_STMT: return 语句</span><br><span class="line">NULL_STMT: 空语句</span><br><span class="line">DECL_STMT: 声明语句</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3 具体实现"></a>3 具体实现</h1><p>以”new”开头的函数（例如 newWhileStmt、newIfStmt、newCompoundStmt、newBinaryOper、newParaDecl、newBreakStmt、newContinueStmt 和 newReturnStmt）是用于创建新的AST节点的函数。这些函数用于构造AST的不同节点类型，并返回一个新的AST节点。这些函数通常接受一些参数，用于指定节点的属性和子节点。<br>以 “rd” 开头的函数（例如 rd_add_exp、rd_mul_exp、rd_unary_exp、rd_primary_exp、rd_l_or_exp、rd_l_and_exp 和 rd_eq_exp）是用于构建抽象语法树（AST）的函数。它们执行递归下降语法分析，根据文法规则逐步构造AST的不同部分。这些函数通常返回AST的一部分，如表达式、运算符等。</p><p>icoding所提供给我们的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ast <span class="title function_">newAstNode</span><span class="params">()</span>;<span class="comment">// 创建一个结点</span></span><br><span class="line">past <span class="title function_">newID</span><span class="params">(<span class="type">char</span>* value)</span>; <span class="comment">//创建一个结点，并将结点中的 svalue 设置为 value</span></span><br><span class="line">past <span class="title function_">newInt</span><span class="params">(<span class="type">int</span> value)</span>; <span class="comment">//创建一个结点，并将结点中的 ivalue 设置为 value</span></span><br></pre></td></tr></table></figure><p>构造抽象语法树</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的二元操作节点</span></span><br><span class="line">past <span class="title function_">newBinaryOper</span><span class="params">(<span class="type">int</span> oper, past left, past right)</span> &#123;</span><br><span class="line">    past node = newAstNode(); <span class="comment">//创建一个新节点</span></span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为二进制操作符</span></span><br><span class="line">        node-&gt;nodeType = BINARY_OPERATOR;</span><br><span class="line">        <span class="comment">// 存储操作符</span></span><br><span class="line">        node-&gt;ivalue = oper;</span><br><span class="line">        <span class="comment">// 存储左右操作数</span></span><br><span class="line">        node-&gt;left = left;</span><br><span class="line">        node-&gt;right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象语法树示例</span></span><br><span class="line">       [*]</span><br><span class="line">      /   \</span><br><span class="line">    [+]    [<span class="number">2</span>]</span><br><span class="line">   /   \</span><br><span class="line">  [<span class="number">5</span>]  [<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>声明引用表达式节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的声明引用表达式节点</span></span><br><span class="line">past <span class="title function_">newDeclRefExp</span><span class="params">(<span class="type">char</span> *name, past left, past right)</span> &#123;  </span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为声明引用表达式</span></span><br><span class="line">        node-&gt;nodeType = DECL_REF_EXPR;</span><br><span class="line">        <span class="comment">// 存储名称</span></span><br><span class="line">        node-&gt;svalue = name;</span><br><span class="line">        <span class="comment">// 存储左右子节点</span></span><br><span class="line">        node-&gt;left = left;</span><br><span class="line">        node-&gt;right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">42</span>;</span><br></pre></td></tr></table></figure><p>创建while语句节点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的 while 语句节点</span></span><br><span class="line">past <span class="title function_">newWhileStmt</span><span class="params">(past condition, past body)</span> &#123;</span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为 while 语句</span></span><br><span class="line">        node-&gt;nodeType = WHILE_STMT;</span><br><span class="line">        <span class="comment">// 存储条件表达式和循环体</span></span><br><span class="line">        node-&gt;left = condition;</span><br><span class="line">        node-&gt;right = body;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-2-“rd”解析函数"><a href="#3-2-“rd”解析函数" class="headerlink" title="3.2 “rd”解析函数"></a>3.2 “rd”解析函数</h1><h2 id="3-2-1-基本表达式"><a href="#3-2-1-基本表达式" class="headerlink" title="3.2.1 基本表达式"></a>3.2.1 基本表达式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PrimaryExp: Y_LPAR Exp Y_RPAR</span><br><span class="line">          | LVal</span><br><span class="line">          | num_INT</span><br><span class="line">          | num_FLOAT</span><br><span class="line">          </span><br><span class="line">LVal: Y_ID</span><br><span class="line">    | Y_ID ArraySubscripts</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rdlab2.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明函数</span></span><br><span class="line">past <span class="title function_">newBinaryOper</span><span class="params">(<span class="type">int</span> oper, past left, past right)</span>;  <span class="comment">// 创建一个新的二元操作节点</span></span><br><span class="line">past <span class="title function_">newDeclRefExp</span><span class="params">(<span class="type">char</span> *name, past left, past right)</span>;  <span class="comment">// 创建一个新的声明引用表达式节点</span></span><br><span class="line">past <span class="title function_">newWhileStmt</span><span class="params">(past condition, past body)</span>;  <span class="comment">// 创建一个新的 while 语句节点</span></span><br><span class="line">past <span class="title function_">newIfStmt</span><span class="params">(past condition, past ifBody, past elseBody)</span>;  <span class="comment">// 创建一个新的 if 语句节点</span></span><br><span class="line">past <span class="title function_">newBreakStmt</span><span class="params">()</span>;  <span class="comment">// 创建一个新的 break 语句节点</span></span><br><span class="line">past <span class="title function_">newContinueStmt</span><span class="params">()</span>;  <span class="comment">// 创建一个新的 continue 语句节点</span></span><br><span class="line">past <span class="title function_">newReturnStmt</span><span class="params">(past left, past right)</span>;  <span class="comment">// 创建一个新的 return 语句节点</span></span><br><span class="line"></span><br><span class="line">past <span class="title function_">rd_add_exp</span><span class="params">()</span>;  <span class="comment">// 解析加法和减法表达式</span></span><br><span class="line">past <span class="title function_">rd_mul_exp</span><span class="params">()</span>;  <span class="comment">// 解析乘法、除法和取模表达式</span></span><br><span class="line">past <span class="title function_">rd_unary_exp</span><span class="params">()</span>;  <span class="comment">// 解析一元表达式</span></span><br><span class="line">past <span class="title function_">rd_primary_exp</span><span class="params">()</span>;  <span class="comment">// 解析基本表达式</span></span><br><span class="line">past <span class="title function_">rd_l_or_exp</span><span class="params">()</span>;  <span class="comment">// 解析逻辑或表达式</span></span><br><span class="line">past <span class="title function_">rd_l_and_exp</span><span class="params">()</span>;  <span class="comment">// 解析逻辑与表达式</span></span><br><span class="line">past <span class="title function_">rd_eq_exp</span><span class="params">()</span>;  <span class="comment">// 解析相等性表达式</span></span><br><span class="line">past <span class="title function_">rd_call_paras</span><span class="params">()</span>;  <span class="comment">// 解析函数调用参数列表</span></span><br><span class="line">past <span class="title function_">rd_relexp</span><span class="params">()</span>;  <span class="comment">// 解析关系运算表达式</span></span><br><span class="line">past <span class="title function_">rd_stmt</span><span class="params">()</span>;  <span class="comment">// 解析语句</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的二元操作节点</span></span><br><span class="line">past <span class="title function_">newBinaryOper</span><span class="params">(<span class="type">int</span> oper, past left, past right)</span> &#123;</span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为二进制操作符</span></span><br><span class="line">        node-&gt;nodeType = BINARY_OPERATOR;</span><br><span class="line">        <span class="comment">// 存储操作符</span></span><br><span class="line">        node-&gt;ivalue = oper;</span><br><span class="line">        <span class="comment">// 存储左右操作数</span></span><br><span class="line">        node-&gt;left = left;</span><br><span class="line">        node-&gt;right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的声明引用表达式节点</span></span><br><span class="line">past <span class="title function_">newDeclRefExp</span><span class="params">(<span class="type">char</span> *name, past left, past right)</span> &#123;  </span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为声明引用表达式</span></span><br><span class="line">        node-&gt;nodeType = DECL_REF_EXPR;</span><br><span class="line">        <span class="comment">// 存储名称</span></span><br><span class="line">        node-&gt;svalue = name;</span><br><span class="line">        <span class="comment">// 存储左右子节点</span></span><br><span class="line">        node-&gt;left = left;</span><br><span class="line">        node-&gt;right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的 while 语句节点</span></span><br><span class="line">past <span class="title function_">newWhileStmt</span><span class="params">(past condition, past body)</span> &#123;</span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为 while 语句</span></span><br><span class="line">        node-&gt;nodeType = WHILE_STMT;</span><br><span class="line">        <span class="comment">// 存储条件表达式和循环体</span></span><br><span class="line">        node-&gt;left = condition;</span><br><span class="line">        node-&gt;right = body;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的 if 语句节点</span></span><br><span class="line">past <span class="title function_">newIfStmt</span><span class="params">(past condition, past ifBody, past elseBody)</span> &#123;</span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为 if 语句</span></span><br><span class="line">        node-&gt;nodeType = IF_STMT;</span><br><span class="line">        <span class="comment">// 存储条件表达式、if 分支和else分支</span></span><br><span class="line">        node-&gt;if_cond = condition;</span><br><span class="line">        node-&gt;left = ifBody;</span><br><span class="line">        node-&gt;right = elseBody;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的 break 语句节点</span></span><br><span class="line">past <span class="title function_">newBreakStmt</span><span class="params">()</span> &#123;   </span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为 break 语句</span></span><br><span class="line">        node-&gt;nodeType = BREAK_STMT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的 continue 语句节点</span></span><br><span class="line">past <span class="title function_">newContinueStmt</span><span class="params">()</span> &#123;</span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为 continue 语句</span></span><br><span class="line">        node-&gt;nodeType = CONTINUE_STMT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的 return 语句节点</span></span><br><span class="line">past <span class="title function_">newReturnStmt</span><span class="params">(past left, past right)</span> &#123;</span><br><span class="line">    past node = newAstNode();</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="comment">// 设置节点的类型为 return 语句</span></span><br><span class="line">        node-&gt;nodeType = RETURN_STMT;</span><br><span class="line">        <span class="comment">// 存储返回表达式</span></span><br><span class="line">        node-&gt;left = left;</span><br><span class="line">        node-&gt;right = right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析基本表达式</span></span><br><span class="line">past <span class="title function_">rd_primary_exp</span><span class="params">()</span> &#123;</span><br><span class="line">    past node = <span class="literal">NULL</span>; <span class="comment">// 初始化节点为NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cur_token.token == Y_LPAR) &#123; <span class="comment">// (表达式)</span></span><br><span class="line">        advance(); </span><br><span class="line">        node = rd_add_exp(); <span class="comment">// 见下面的rd_add_exp()函数</span></span><br><span class="line">        <span class="keyword">if</span> (cur_token.token != Y_RPAR) &#123; <span class="comment">// 缺右括号</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        advance(); </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur_token.token == Y_ID) &#123; <span class="comment">// LVal</span></span><br><span class="line">        <span class="type">char</span> *s = cur_token.attr.svalue;</span><br><span class="line">        past Arr = rd_array_subscripts();</span><br><span class="line">        node = newDeclRefExp(s, Arr, <span class="literal">NULL</span>);</span><br><span class="line">advance();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur_token.token == num_INT) &#123; </span><br><span class="line">        node = newInt(cur_token.attr.ivalue); <span class="comment">// 构造整数节点</span></span><br><span class="line">        advance(); </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur_token.token == num_FLOAT) &#123; </span><br><span class="line">        node = newAstNode(); <span class="comment">// 构造浮点数节点</span></span><br><span class="line">        advance(); </span><br><span class="line">        node-&gt;fvalue = cur_token.attr.fvalue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node; <span class="comment">// 返回表达式树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析一元表达式</span></span><br><span class="line">past <span class="title function_">rd_unary_exp</span><span class="params">()</span> &#123;</span><br><span class="line">    past node = rd_primary_exp(); <span class="comment">// 获取基本表达式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (node == <span class="literal">NULL</span>) &#123; <span class="comment">// 当基本表达式为空时</span></span><br><span class="line">        <span class="keyword">if</span> (cur_token.token == Y_ID) &#123; <span class="comment">// 当当前符号为标识符时</span></span><br><span class="line">            <span class="type">char</span> *s = cur_token.attr.svalue;</span><br><span class="line">            advance();</span><br><span class="line">            <span class="keyword">if</span> (cur_token.token == Y_LPAR) &#123;</span><br><span class="line">                advance();</span><br><span class="line">past params;</span><br><span class="line">                <span class="keyword">if</span> (cur_token.token != Y_RPAR) &#123;</span><br><span class="line">                    params = rd_call_paras(); <span class="comment">// 解析函数调用参数</span></span><br><span class="line">                &#125;</span><br><span class="line">                node = newDeclRefExp(s, params, <span class="literal">NULL</span>); <span class="comment">// 构造声明引用表达式</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur_token.token == Y_ADD || cur_token.token == Y_SUB || cur_token.token == Y_NOT) &#123; <span class="comment">// 当当前符号为加号、减号或取反符号</span></span><br><span class="line">            <span class="type">int</span> oper = cur_token.token; <span class="comment">// 记录运算符</span></span><br><span class="line">            advance(); </span><br><span class="line">            past operand = rd_unary_exp(); <span class="comment">// 获取一元表达式</span></span><br><span class="line">            node = newBinaryOper(oper, <span class="literal">NULL</span>, operand); <span class="comment">// 构造二元操作表达式</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>; <span class="comment">// 无法匹配其他情况，返回空</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node; <span class="comment">// 返回表达式树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析加法表达式</span></span><br><span class="line">past <span class="title function_">rd_add_exp</span><span class="params">()</span> &#123;</span><br><span class="line">    past left = rd_mul_exp(); <span class="comment">// 获取乘法表达式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur_token.token == Y_ADD || cur_token.token == Y_SUB) &#123; <span class="comment">// 当当前符号为加号或减号时</span></span><br><span class="line">        <span class="type">int</span> oper = cur_token.token; <span class="comment">// 记录运算符</span></span><br><span class="line">        advance(); </span><br><span class="line">        past right = rd_mul_exp(); <span class="comment">// 获取乘法表达式</span></span><br><span class="line">        left = newBinaryOper(oper, left, right); <span class="comment">// 构造二元操作表达式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">// 返回表达式树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析乘法表达式</span></span><br><span class="line">past <span class="title function_">rd_mul_exp</span><span class="params">()</span> &#123;</span><br><span class="line">    past left = rd_unary_exp(); <span class="comment">// 获取一元表达式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur_token.token == Y_MUL || cur_token.token == Y_DIV || cur_token.token == Y_MODULO) &#123; <span class="comment">// 当当前符号为乘号、除号或取模符号时</span></span><br><span class="line">        <span class="type">int</span> oper = cur_token.token; <span class="comment">// 记录运算符</span></span><br><span class="line">        advance(); </span><br><span class="line">        past right = rd_unary_exp(); <span class="comment">// 获取一元表达式</span></span><br><span class="line">        left = newBinaryOper(oper, left, right); <span class="comment">// 构造二元操作表达式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">// 返回表达式树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析相等表达式</span></span><br><span class="line">past <span class="title function_">rd_eq_exp</span><span class="params">()</span> &#123;</span><br><span class="line">    past left = rd_relexp(); <span class="comment">// 获取关系表达式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur_token.token == Y_EQ || cur_token.token == Y_NOTEQ) &#123; <span class="comment">// 当当前符号为等号或不等号时</span></span><br><span class="line">        <span class="type">int</span> oper = cur_token.token; <span class="comment">// 记录运算符</span></span><br><span class="line">        advance(); </span><br><span class="line">        past right = rd_relexp(); <span class="comment">// 获取关系表达式</span></span><br><span class="line">        left = newBinaryOper(oper, left, right); <span class="comment">// 构造二元操作表达式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">// 返回表达式树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析关系表达式</span></span><br><span class="line">past <span class="title function_">rd_relexp</span><span class="params">()</span> &#123;</span><br><span class="line">    past left = rd_add_exp(); <span class="comment">// 获取加法表达式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (cur_token.token) &#123;</span><br><span class="line">            <span class="keyword">case</span> Y_LESS:</span><br><span class="line">            <span class="keyword">case</span> Y_LESSEQ:</span><br><span class="line">            <span class="keyword">case</span> Y_GREAT:</span><br><span class="line">            <span class="keyword">case</span> Y_GREATEQ: &#123; <span class="comment">// 当当前符号为小于、小于等于、大于或大于等于时</span></span><br><span class="line">                <span class="type">int</span> oper = cur_token.token; <span class="comment">// 记录运算符</span></span><br><span class="line">                advance(); </span><br><span class="line">                past right = rd_add_exp(); <span class="comment">// 获取加法表达式</span></span><br><span class="line">                left = newBinaryOper(oper, left, right); <span class="comment">// 构造二元操作表达式</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> left; <span class="comment">// 返回表达式树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析逻辑与表达式</span></span><br><span class="line">past <span class="title function_">rd_l_and_exp</span><span class="params">()</span> &#123;</span><br><span class="line">    past left = rd_eq_exp(); <span class="comment">// 获取相等表达式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur_token.token == Y_AND) &#123; <span class="comment">// 当当前符号为逻辑与符号时</span></span><br><span class="line">        <span class="type">int</span> oper = cur_token.token; <span class="comment">// 记录运算符</span></span><br><span class="line">        advance(); </span><br><span class="line">        past right = rd_eq_exp(); <span class="comment">// 获取相等表达式</span></span><br><span class="line">        left = newBinaryOper(oper, left, right); <span class="comment">// 构造二元操作表达式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">// 返回表达式树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析逻辑或表达式</span></span><br><span class="line">past <span class="title function_">rd_l_or_exp</span><span class="params">()</span> &#123;</span><br><span class="line">    past left = rd_l_and_exp(); <span class="comment">// 获取逻辑与表达式</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur_token.token == Y_OR) &#123; <span class="comment">// 当当前符号为逻辑或符号时</span></span><br><span class="line">        <span class="type">int</span> oper = cur_token.token; <span class="comment">// 记录运算符</span></span><br><span class="line">        advance(); </span><br><span class="line">        past right = rd_l_and_exp(); <span class="comment">// 获取逻辑与表达式</span></span><br><span class="line">        left = newBinaryOper(oper, left, right); <span class="comment">// 构造二元操作表达式</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> left; <span class="comment">// 返回表达式树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析函数调用参数</span></span><br><span class="line">past <span class="title function_">rd_call_paras</span><span class="params">()</span> &#123;</span><br><span class="line">    past head = rd_add_exp(); <span class="comment">// 获取加法表达式</span></span><br><span class="line">    past current = head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur_token.token) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur_token.token != Y_COMMA) &#123; <span class="comment">// 当当前符号不为逗号时</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        advance(); </span><br><span class="line">        past new_node = rd_add_exp(); <span class="comment">// 获取加法表达式</span></span><br><span class="line">        current-&gt;next = new_node;</span><br><span class="line">        current = current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head; <span class="comment">// 返回参数链表头节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析语句</span></span><br><span class="line">past <span class="title function_">rd_stmt</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (cur_token.token) &#123;</span><br><span class="line">        <span class="keyword">case</span> Y_ID: &#123; <span class="comment">// LVal 开头 ———— 赋值语句</span></span><br><span class="line">            <span class="type">char</span> *s = cur_token.attr.svalue; <span class="comment">// 处理LVal（等号左边）</span></span><br><span class="line">            past Arr = rd_array_subscripts();</span><br><span class="line">            past lval = newDeclRefExp(s, Arr, <span class="literal">NULL</span>);</span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_ASSIGN) &#123; <span class="comment">// 语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            past left = rd_add_exp(); <span class="comment">// 获取加法表达式（等号右边）</span></span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_SEMICOLON) &#123; <span class="comment">// 语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">return</span> newBinaryOper(Y_ASSIGN, lval, left); <span class="comment">// 返回赋值表达式</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Y_SEMICOLON: &#123; <span class="comment">// 分号开头 ———— 空语句</span></span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Y_LBRACKET: &#123; <span class="comment">// 左大括号开头 ———— 代码块</span></span><br><span class="line">            advance(); </span><br><span class="line">            past block = rd_block(); <span class="comment">// 获取块语句</span></span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_RBRACKET) &#123; <span class="comment">// 语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">return</span> block; <span class="comment">// 返回块语句</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Y_WHILE: &#123; <span class="comment">// WHILE语句</span></span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_LPAR) &#123; <span class="comment">// 如果下一个符号不是左括号，语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            past condition = rd_l_or_exp(); <span class="comment">// 获取逻辑或表达式</span></span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_RPAR) &#123; <span class="comment">// 如果下一个符号不是右括号，语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            past stmt = rd_stmt(); <span class="comment">// 获取语句</span></span><br><span class="line">            <span class="keyword">return</span> newWhileStmt(condition, stmt); <span class="comment">// 返回WHILE语句</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Y_IF: &#123; <span class="comment">// IF语句</span></span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_LPAR) &#123; <span class="comment">// 如果下一个符号不是左括号，语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            past condition = rd_l_or_exp(); <span class="comment">// 获取逻辑或表达式</span></span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_RPAR) &#123; <span class="comment">// 如果下一个符号不是右括号，语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            past if_stmt = rd_stmt(); <span class="comment">// 获取语句</span></span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_ELSE) &#123; <span class="comment">// 如果下一个符号不是ELSE关键字 ———— 无else</span></span><br><span class="line">                <span class="keyword">return</span> newIfStmt(condition, if_stmt, <span class="literal">NULL</span>); <span class="comment">// 返回IF语句</span></span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            past else_stmt = rd_stmt(); <span class="comment">// 获取ELSE分支语句</span></span><br><span class="line">            <span class="keyword">return</span> newIfStmt(condition, if_stmt, else_stmt); <span class="comment">// 返回IF-ELSE语句</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Y_BREAK: &#123; <span class="comment">// BREAK语句</span></span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_SEMICOLON) &#123; <span class="comment">// 如果下一个符号不是分号，语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">return</span> newBreakStmt(); <span class="comment">// 返回BREAK语句</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Y_CONTINUE: &#123; <span class="comment">// CONTINUE语句</span></span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_SEMICOLON) &#123; <span class="comment">// 如果下一个符号不是分号，语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>; </span><br><span class="line">            &#125;</span><br><span class="line">            advance(); </span><br><span class="line">            <span class="keyword">return</span> newContinueStmt(); <span class="comment">// 返回CONTINUE语句</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> Y_RETURN: &#123; <span class="comment">// RETURN语句</span></span><br><span class="line">            advance(); </span><br><span class="line">            past left = rd_add_exp(); <span class="comment">// 获取加法表达式</span></span><br><span class="line">            <span class="keyword">if</span> (cur_token.token != Y_SEMICOLON) &#123; <span class="comment">// 如果下一个符号不是分号，语法错误</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            advance();</span><br><span class="line">            <span class="keyword">return</span> newReturnStmt(left, <span class="literal">NULL</span>); <span class="comment">// 返回RETURN语句</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;关于icoding中的编译原理实验二&lt;/p&gt;
&lt;p&gt;下面这是icoding所提供的头文件&lt;br&gt;&lt;code&gt;rdlab2.h&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>大二竞赛展望</title>
    <link href="https://jiyexingzou.github.io/2024/10/22/%E5%A4%A7%E4%BA%8C%E7%AB%9E%E8%B5%9B%E5%B1%95%E6%9C%9B/"/>
    <id>https://jiyexingzou.github.io/2024/10/22/%E5%A4%A7%E4%BA%8C%E7%AB%9E%E8%B5%9B%E5%B1%95%E6%9C%9B/</id>
    <published>2024-10-22T07:44:53.000Z</published>
    <updated>2024-10-22T07:47:22.291Z</updated>
    
    <content type="html"><![CDATA[<p>蓝桥杯我选择报python组</p><p>服创赛和计算机设计赛我也打算参加</p><p>希望一年以后能有好成果</p><p>我也想要成为github全是绿点的人o(╥﹏╥)o</p><p><img src="/2024/10/22/%E5%A4%A7%E4%BA%8C%E7%AB%9E%E8%B5%9B%E5%B1%95%E6%9C%9B/fac2433f0441c3454ea4eed41c259074.jpg" alt="alt text" title="放一张图在这里激励我自己"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;蓝桥杯我选择报python组&lt;/p&gt;
&lt;p&gt;服创赛和计算机设计赛我也打算参加&lt;/p&gt;
&lt;p&gt;希望一年以后能有好成果&lt;/p&gt;
&lt;p&gt;我也想要成为github全是绿点的人o(╥﹏╥)o&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/10/22/%E5%A4%A7%E4%BA%8</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>docker入门与配置</title>
    <link href="https://jiyexingzou.github.io/2024/10/19/docker%E5%85%A5%E9%97%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://jiyexingzou.github.io/2024/10/19/docker%E5%85%A5%E9%97%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2024-10-19T07:17:01.000Z</published>
    <updated>2024-10-21T07:41:11.625Z</updated>
    
    <content type="html"><![CDATA[<p>docker官方文档:<br><a href="https://docs.docker.com/get-started/introduction/get-docker-desktop/">https://docs.docker.com/get-started/introduction/get-docker-desktop/</a></p><p>first docker</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;docker官方文档:&lt;br&gt;&lt;a href=&quot;https://docs.docker.com/get-started/introduction/get-docker-desktop/&quot;&gt;https://docs.docker.com/get-started/introdu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>批评与自我批评</title>
    <link href="https://jiyexingzou.github.io/2024/10/15/%E6%89%B9%E8%AF%84%E4%B8%8E%E8%87%AA%E6%88%91%E6%89%B9%E8%AF%84/"/>
    <id>https://jiyexingzou.github.io/2024/10/15/%E6%89%B9%E8%AF%84%E4%B8%8E%E8%87%AA%E6%88%91%E6%89%B9%E8%AF%84/</id>
    <published>2024-10-15T07:13:57.000Z</published>
    <updated>2024-10-15T08:32:22.020Z</updated>
    
    <content type="html"><![CDATA[<p>最近这几天，发现了我一个最大的问题，就是心存侥幸，总是在不该偷懒的地偷懒，最近发生的两件事，让我深刻意识到了这样做的不好</p><h3 id="未能在入党积极分子中成功结业"><a href="#未能在入党积极分子中成功结业" class="headerlink" title="未能在入党积极分子中成功结业"></a>未能在入党积极分子中成功结业</h3><p><strong>事情经过</strong>:<br>起因：没有做每日日程提醒，导致忘记去上入党积极分子的第二次课<br>当时没有能够补救的措施，<strong>心存侥幸</strong>以为伪造辅导员签字可以请假，结果失败</p><p>即使是这样还没长教训，最后要求写两千字的学习证明，由于偷懒只写了1000字，并且书写很乱</p><h3 id="未能拿到1000奖学金"><a href="#未能拿到1000奖学金" class="headerlink" title="未能拿到1000奖学金"></a>未能拿到1000奖学金</h3><p>这个纯纯是自己的锅，在申请奖学金页面，有一个申请理由，自己很敷衍的填了上去，结果最终没有通过专项奖学金。</p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>该如何改正？</p><ol><li>制定每日日程表，做到有事情填上去及时提醒自己。</li><li>绝不能有这种懈怠的思想，这样会让你失去很多的机会</li></ol><p>此外，我还有每日不知道该做什么，三天打鱼，两天晒网的这种态势<br>可以称之为迷惘。</p><p>机会?<br>有同学找我打服创，正在找队友<br>我应该及时的去询问</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近这几天，发现了我一个最大的问题，就是心存侥幸，总是在不该偷懒的地偷懒，最近发生的两件事，让我深刻意识到了这样做的不好&lt;/p&gt;
&lt;h3 id=&quot;未能在入党积极分子中成功结业&quot;&gt;&lt;a href=&quot;#未能在入党积极分子中成功结业&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>K210快速上手</title>
    <link href="https://jiyexingzou.github.io/2024/10/08/K210%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    <id>https://jiyexingzou.github.io/2024/10/08/K210%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</id>
    <published>2024-10-08T15:09:39.000Z</published>
    <updated>2024-10-08T15:10:08.861Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/small_po_kid/article/details/113762110">https://blog.csdn.net/small_po_kid/article/details/113762110</a></p><p>咱先放个网址在这里，之后再填坑</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/small_po_kid/article/details/113762110&quot;&gt;https://blog.csdn.net/small_po_kid/article/details/113762110&lt;/a&gt;&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Ollama本地部署</title>
    <link href="https://jiyexingzou.github.io/2024/10/08/Ollama%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/"/>
    <id>https://jiyexingzou.github.io/2024/10/08/Ollama%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</id>
    <published>2024-10-08T14:34:33.000Z</published>
    <updated>2024-10-08T15:06:42.342Z</updated>
    
    <content type="html"><![CDATA[<p>llama作为一个开源模型<br>在ollama官网下载<br><a href="https://ollama.com/">https://ollama.com/</a></p><p>clone llama的git库即可直接本地部署ai<br>完整教程<br><a href="https://www.cnblogs.com/obullxl/p/18295202/NTopic2024071001">https://www.cnblogs.com/obullxl/p/18295202/NTopic2024071001</a></p><p>基于 WebUI 部署 Ollama 可视化对话界面<br>Ollama自带控制台对话界面体验总归是不太好，接下来部署 Web 可视化聊天界面：</p><p>下载并安装 Node.js 工具：<a href="https://nodejs.org/zh-cn">https://nodejs.org/zh-cn</a><br>下载ollama-webui工程代码：git clone <a href="https://github.com/ollama-webui/ollama-webui-lite">https://github.com/ollama-webui/ollama-webui-lite</a> ollama-webui<br>切换ollama-webui代码的目录：cd ollama-webui<br>设置 Node.js 工具包镜像源（下载提速）：npm config set registry <a href="http://mirrors.cloud.tencent.com/npm/">http://mirrors.cloud.tencent.com/npm/</a><br>安装 Node.js 依赖的工具包：npm install<br>最后，启动 Web 可视化界面：npm run dev</p><p><img src="/2024/10/08/Ollama%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/05.jpg"></p><p>如果看到以上输出，代表 Web 可视化界面已经成功了！</p><p>浏览器打开 Web 可视化界面：<a href="http://localhost:3000/">http://localhost:3000/</a></p><p><img src="/2024/10/08/Ollama%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/06.png"></p><p>接下来还可以通过python api和java api对于该大语言模型进行封装，上述网址中有，不再赘述</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;llama作为一个开源模型&lt;br&gt;在ollama官网下载&lt;br&gt;&lt;a href=&quot;https://ollama.com/&quot;&gt;https://ollama.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;clone llama的git库即可直接本地部署ai&lt;br&gt;完整教程&lt;br&gt;&lt;a hre</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>国庆七天总结</title>
    <link href="https://jiyexingzou.github.io/2024/10/07/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E6%80%BB%E7%BB%93/"/>
    <id>https://jiyexingzou.github.io/2024/10/07/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E6%80%BB%E7%BB%93/</id>
    <published>2024-10-07T10:32:34.000Z</published>
    <updated>2024-10-07T10:49:49.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我的国庆过的怎么样！"><a href="#我的国庆过的怎么样！" class="headerlink" title="我的国庆过的怎么样！"></a>我的国庆过的怎么样！</h1><p><em><strong>-国庆七天，我是怎么过的呢？我为什么要写一个总结呢？-</strong></em><br><strong>–写在文章开头</strong></p><p>现在是十月七号，也是国庆七天乐的最后一个晚上了，就我现在的感觉来看，我觉得我的国庆七天过得并不是很愉快。</p><p><strong>为什么!?</strong></p><p>可能是，我感觉，我在国庆的第一天，就没有想好我这几天究竟要干嘛，有一种既要又要的感觉。<br>可以说，假期的一开始，我是想要好好学习七天的。当时唯一给自己定的玩耍的一天就是十月四号的cd28.</p><p>但是，我干了些什么呢？<br>第一天，听说群友要去唱k，我就去了，实际上一共也没有唱几首歌，在那里扣了一个下午的手机。由于我的惰性，在吃喝玩乐回来之后，选择了直接回家。<br>第二天，在家里的我就更加放飞去玩了，但是心里又没有想好究竟玩什么。就在内耗中过去了一天，这一天去检查了一下身体，结果检查出来多项指标不正常，更让我忧心忡忡。<br>第三天，我打算的是早上回学校，但是由于我的拖沓，也是在浑浑噩噩之中玩到了下午，回到了学校，想着明天cd28，干脆今天也不学习了<br>第四天，逛了一天的展，晚上回来更是无心学习<br>第五天，终于打算要学习了，结果在图书馆一个下午就写了几道题，自己更多的时间在内耗和扣手机中度过，晚上被人叫出打了光棒，录了视频，我却还挺开心的？<br>第六天，无心学习，扣手机到12点起床，一个下午同样没做几道题，想要配置树莓派的环境没找到网线，想要学习java没看下去，自己心里还一直惦记着学习rust<br>第七天，早上10点起床，在宿舍床上内耗了一个下午，晚上到图书馆开始写了这个文档。</p><p>可以说，这几天，我是纯粹没有想好该怎么安排，导致七天玩也没玩开心，也没有学到什么。</p><p>这七天让我反思了一下，做事情得有一个自己的计划，告诉自己什么时候该玩，什么时候该学习？</p><p>真的是兴趣问题吗？说实话，现在我干的都是我自己目前最感兴趣的。但是现在还是一无所成，玩倒是玩了不少。</p><p><strong>现在我争取做到以下几点</strong></p><ol><li>放下手机</li><li>有计划的做事</li><li>早睡(这也是国庆七天最困扰我的)</li><li>找到自己真正想做的，做出一定的规模!</li></ol><h2 id="这就是我国庆七天的想法了"><a href="#这就是我国庆七天的想法了" class="headerlink" title="这就是我国庆七天的想法了"></a>这就是我国庆七天的想法了</h2><p>最后放一张和泉纱雾吧</p><p><img src="/2024/10/07/%E5%9B%BD%E5%BA%86%E4%B8%83%E5%A4%A9%E6%80%BB%E7%BB%93/1.jpg" alt="可爱的和泉纱雾" title="在10月六号换了一个头像，很多人问我为什么换，可能是因为我想要洗心革面吧"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;我的国庆过的怎么样！&quot;&gt;&lt;a href=&quot;#我的国庆过的怎么样！&quot; class=&quot;headerlink&quot; title=&quot;我的国庆过的怎么样！&quot;&gt;&lt;/a&gt;我的国庆过的怎么样！&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;-国庆七天，我是怎么过的呢？我为什么要写一个总结呢？</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>常用网站指北</title>
    <link href="https://jiyexingzou.github.io/2024/10/07/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E6%8C%87%E5%8C%97/"/>
    <id>https://jiyexingzou.github.io/2024/10/07/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E6%8C%87%E5%8C%97/</id>
    <published>2024-10-07T10:12:49.000Z</published>
    <updated>2024-10-16T16:46:49.016Z</updated>
    
    <content type="html"><![CDATA[<p>计算机教育中缺失的一课<br><a href="https://missing-semester-cn.github.io/">https://missing-semester-cn.github.io/</a><br>CS自学指南<br><a href="https://csdiy.wiki/">https://csdiy.wiki/</a><br>微软官方的Learn<br><a href="https://learn.microsoft.com/zh-cn/">https://learn.microsoft.com/zh-cn/</a><br>GitHub<br><a href="https://github.com/">https://github.com/</a><br>语言学习<br><a href="https://www.runoob.com/">https://www.runoob.com/</a><br>kicad官网指南<br><a href="https://dev-docs.kicad.org/zh-cn/">https://dev-docs.kicad.org/zh-cn/</a><br>renpy引擎官方文档<br><a href="https://doc.renpy.cn/zh-CN">https://doc.renpy.cn/zh-CN</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;计算机教育中缺失的一课&lt;br&gt;&lt;a href=&quot;https://missing-semester-cn.github.io/&quot;&gt;https://missing-semester-cn.github.io/&lt;/a&gt;&lt;br&gt;CS自学指南&lt;br&gt;&lt;a href=&quot;https://</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>树莓派的环境配置遇见的问题</title>
    <link href="https://jiyexingzou.github.io/2024/10/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://jiyexingzou.github.io/2024/10/06/%E6%A0%91%E8%8E%93%E6%B4%BE%E7%9A%84%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E9%81%87%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2024-10-06T13:05:07.000Z</published>
    <updated>2024-10-07T10:49:51.610Z</updated>
    
    <content type="html"><![CDATA[<p>在配置树莓派的基础环境时，由于我个人没有屏幕，所以需要远程获取树莓派的ip地址。又由于我身边又没有网线，所以我给出我的解决方案<br>我尝试的方法,使用手机app fing,在手机和树莓派连接同一个WiFi的情况下,由于树莓派的主机名一般都是raspberry,所以很容易查出树莓派的ip地址</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在配置树莓派的基础环境时，由于我个人没有屏幕，所以需要远程获取树莓派的ip地址。又由于我身边又没有网线，所以我给出我的解决方案&lt;br&gt;我尝试的方法,使用手机app fing,在手机和树莓派连接同一个WiFi的情况下,由于树莓派的主机名一般都是raspberry,所以很容易查</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>k210</title>
    <link href="https://jiyexingzou.github.io/2024/08/23/k210/"/>
    <id>https://jiyexingzou.github.io/2024/08/23/k210/</id>
    <published>2024-08-23T14:28:28.000Z</published>
    <updated>2024-08-23T14:37:56.669Z</updated>
    
    <content type="html"><![CDATA[<p>什么是Maix bit，它和K210是什么关系；连接硬件并测试</p><p>MAIX Bit开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;什么是Maix bit，它和K210是什么关系；连接硬件并测试&lt;/p&gt;
&lt;p&gt;MAIX Bit开发板是SiPEED公司MAIX产品线的一员，基于嘉楠堪智科技的边缘智能计算芯片K210(RISC-V架构 64位双核)设计的一款AIOT开发板&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>USART串口协议</title>
    <link href="https://jiyexingzou.github.io/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/"/>
    <id>https://jiyexingzou.github.io/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/</id>
    <published>2024-08-18T14:24:03.000Z</published>
    <updated>2024-08-23T14:32:02.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="通信接口类型"><a href="#通信接口类型" class="headerlink" title="通信接口类型"></a>通信接口类型</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image.png" alt="alt text"><br>双工模式：<br>全双工：通信双方能够同时进行双向通信</p><h2 id="串口发送"><a href="#串口发送" class="headerlink" title="串口发送"></a>串口发送</h2><h2 id="串口发送-接收"><a href="#串口发送-接收" class="headerlink" title="串口发送+接收"></a>串口发送+接收</h2><p>串口时序</p><h2 id="串口通信"><a href="#串口通信" class="headerlink" title="串口通信"></a>串口通信</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-1.png" alt="alt text"></p><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-2.png" alt="alt text"></p><h2 id="电平标准"><a href="#电平标准" class="headerlink" title="电平标准"></a>电平标准</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-3.png" alt="alt text"></p><h2 id="串口参数及时序"><a href="#串口参数及时序" class="headerlink" title="串口参数及时序"></a>串口参数及时序</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-4.png" alt="alt text"></p><h2 id="USART外设"><a href="#USART外设" class="headerlink" title="USART外设"></a>USART外设</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-5.png" alt="alt text"></p><h2 id="USART框图"><a href="#USART框图" class="headerlink" title="USART框图"></a>USART框图</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-6.png" alt="alt text"></p><h2 id="波特率发生器"><a href="#波特率发生器" class="headerlink" title="波特率发生器"></a>波特率发生器</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-7.png" alt="alt text"></p><h2 id="HEX数据包"><a href="#HEX数据包" class="headerlink" title="HEX数据包"></a>HEX数据包</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-8.png" alt="alt text"><br>固定包长和可变包长的选择问题</p><h2 id="文本数据包"><a href="#文本数据包" class="headerlink" title="文本数据包"></a>文本数据包</h2><p><img src="/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F%E8%AE%AE/image-9.png" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;通信接口类型&quot;&gt;&lt;a href=&quot;#通信接口类型&quot; class=&quot;headerlink&quot; title=&quot;通信接口类型&quot;&gt;&lt;/a&gt;通信接口类型&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2024/08/18/USART%E4%B8%B2%E5%8F%A3%E5%8D%8F</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TIM输出比较</title>
    <link href="https://jiyexingzou.github.io/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/"/>
    <id>https://jiyexingzou.github.io/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/</id>
    <published>2024-08-12T09:07:14.000Z</published>
    <updated>2024-08-18T14:22:24.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="输出比较简介-OC"><a href="#输出比较简介-OC" class="headerlink" title="输出比较简介 OC"></a>输出比较简介 OC</h2><p><img src="/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/image-1.png" alt="alt text"></p><p>用于输出PWM波形</p><h2 id="PWM波形"><a href="#PWM波形" class="headerlink" title="PWM波形"></a>PWM波形</h2><p><img src="/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/image-2.png" alt="alt text"></p><p>脉冲宽度调制<br>等效的生成一个模拟信号的输出<br>具有惯性的系统才能使用PWM</p><p>PWM三个参数<br>频率<br>占空比等效关系是线性的<br>分辨率</p><h2 id="输出比较通道"><a href="#输出比较通道" class="headerlink" title="输出比较通道"></a>输出比较通道</h2><p><img src="/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/image-3.png" alt="alt text"><br><img src="/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/image-4.png" alt="alt text"></p><p>输出比较模式<br><img src="/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/image-5.png" alt="alt text"></p><p>PWM模式1<br>PWM模式2</p><h2 id="PWM基本结构"><a href="#PWM基本结构" class="headerlink" title="PWM基本结构"></a>PWM基本结构</h2><p><img src="/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/image-6.png" alt="alt text"></p><h2 id="PWM参数计算"><a href="#PWM参数计算" class="headerlink" title="PWM参数计算"></a>PWM参数计算</h2><p><img src="/2024/08/12/TIM%E8%BE%93%E5%87%BA%E6%AF%94%E8%BE%83/image-7.png" alt="alt text"></p><h2 id="STM32外部设备"><a href="#STM32外部设备" class="headerlink" title="STM32外部设备"></a>STM32外部设备</h2><p>舵机<br>直流电机</p><p>电机驱动模块</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;输出比较简介-OC&quot;&gt;&lt;a href=&quot;#输出比较简介-OC&quot; class=&quot;headerlink&quot; title=&quot;输出比较简介 OC&quot;&gt;&lt;/a&gt;输出比较简介 OC&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2024/08/12/TIM%E8%BE%93%E5%87%B</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>TIM定时中断</title>
    <link href="https://jiyexingzou.github.io/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/"/>
    <id>https://jiyexingzou.github.io/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/</id>
    <published>2024-08-03T07:25:43.000Z</published>
    <updated>2024-08-12T09:05:43.747Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image.png" alt="alt text"></p><h2 id="定时器类型"><a href="#定时器类型" class="headerlink" title="定时器类型"></a>定时器类型</h2><p><img src="/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image-1.png" alt="alt text"></p><h3 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h3><p><strong>基本定时器框图</strong><br><img src="/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image-2.png" alt="alt text"><br>向上计数<br><strong>通用定时器</strong><br><img src="/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image-4.png" alt="alt text"><br>向上计数，向下计数，中央对齐模式<br><strong>高级定时器</strong><br>增加部分了解即可</p><h2 id="定时中断基本结构"><a href="#定时中断基本结构" class="headerlink" title="定时中断基本结构"></a>定时中断基本结构</h2><p><img src="/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image-5.png" alt="alt text"></p><p><strong>预分频器时序</strong><br><img src="/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image-6.png" alt="alt text"></p><p><strong>计数器时序</strong><br><img src="/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image-7.png" alt="alt text"></p><p>有预装时序 VS 无预装时序<br>有预装时序：有影子寄存器</p><p><strong>RCC时钟树</strong><br><img src="/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image-8.png" alt="alt text"></p><p>无论什么定时器，内部基准时钟都是72Mhz</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2024/08/03/TIM%E5%AE%9A%E6%97%B6%E4%B8%AD%E6%96%AD/image.png&quot; alt=&quot;alt text&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;定时器类型&quot;&gt;&lt;a href=&quot;#定时器类型&quot; class=&quot;heade</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OLED显示屏</title>
    <link href="https://jiyexingzou.github.io/2024/08/03/OLED%E6%98%BE%E7%A4%BA%E5%B1%8F/"/>
    <id>https://jiyexingzou.github.io/2024/08/03/OLED%E6%98%BE%E7%A4%BA%E5%B1%8F/</id>
    <published>2024-08-03T06:36:04.000Z</published>
    <updated>2024-08-03T07:24:29.787Z</updated>
    
    <content type="html"><![CDATA[<p>学会了使用如何用OLED调试程序</p><p>以及如何用keil调试程序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学会了使用如何用OLED调试程序&lt;/p&gt;
&lt;p&gt;以及如何用keil调试程序&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>OLED调试工具</title>
    <link href="https://jiyexingzou.github.io/2024/08/02/OLED%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
    <id>https://jiyexingzou.github.io/2024/08/02/OLED%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</id>
    <published>2024-08-02T09:27:37.000Z</published>
    <updated>2024-08-03T06:22:04.824Z</updated>
    
    <content type="html"><![CDATA[<p><strong>OLED作为调试的显示屏，方便调试程序</strong></p><h2 id="调试方式"><a href="#调试方式" class="headerlink" title="调试方式"></a>调试方式</h2><p><img src="/2024/08/02/OLED%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/image-4.png" alt="alt text"></p><p>其他方法<br>点灯调试法：<br>注释调试法:<br>对照法:</p><p>缩小范围，控制变量，对比测试</p><h2 id="OLED显示屏"><a href="#OLED显示屏" class="headerlink" title="OLED显示屏"></a>OLED显示屏</h2><p><img src="/2024/08/02/OLED%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/image-5.png" alt="alt text"><br>有机发光的屏幕<br>硬件电路部分<br><img src="/2024/08/02/OLED%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/image-6.png" alt="alt text"></p><p>OLED驱动函数<br><img src="/2024/08/02/OLED%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/image-7.png" alt="alt text"></p><p>同时也能生成中文，图像等内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;OLED作为调试的显示屏，方便调试程序&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;调试方式&quot;&gt;&lt;a href=&quot;#调试方式&quot; class=&quot;headerlink&quot; title=&quot;调试方式&quot;&gt;&lt;/a&gt;调试方式&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/2024/08</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>支教日志</title>
    <link href="https://jiyexingzou.github.io/2024/07/17/%E6%94%AF%E6%95%99%E6%97%A5%E5%BF%97/"/>
    <id>https://jiyexingzou.github.io/2024/07/17/%E6%94%AF%E6%95%99%E6%97%A5%E5%BF%97/</id>
    <published>2024-07-17T08:37:19.000Z</published>
    <updated>2024-07-24T04:35:49.039Z</updated>
    
    <content type="html"><![CDATA[<h1 id="支教日志"><a href="#支教日志" class="headerlink" title="支教日志"></a>支教日志</h1><h2 id="7-10"><a href="#7-10" class="headerlink" title="7-10"></a>7-10</h2><p>这一天我们队员到达了自贡支教点，入住了宾馆，和校长交流了一下<br>熟悉了附近的基本情况，怎么说呢，龙万乡这个地方，可以说是麻雀虽小，五脏俱全</p><p><img src="/2024/07/17/%E6%94%AF%E6%95%99%E6%97%A5%E5%BF%97/803ef566149f82b6a38bc6849169a161.jpeg" alt="alt text" title="我们和校长交流！"></p><h2 id="7-11"><a href="#7-11" class="headerlink" title="7-11"></a>7-11</h2><p>第一天我们进行了破冰活动，我在初中和小学都介绍了一下我自己，看到这么多个求知若渴的面庞，我还是非常开心的，希望能够带给他们知识，能够开阔他们的眼界。</p><h2 id="7-12"><a href="#7-12" class="headerlink" title="7-12"></a>7-12</h2><p>这一天我分别在初中和小学上了我的动漫鉴赏课，怎么说呢，给我的感觉就是<br>小学的同学们非常的热情，乐于助人。<br>初中的同学可能进入了青春期，较为的腼腆，不过我还是能够感受出来同学们都非常愿意配合我们上课。<br>怎么说呢，由于我上的是艺术类课程，我的课程任务还是比较轻松的，我能够明显的感觉到孩子们愿意听我的课，<br>这一点还是非常开心的，我希望我能够把我热爱的东西教给孩子们，让他们也能感受到我们这一辈人的关怀。</p><p><img src="/2024/07/17/%E6%94%AF%E6%95%99%E6%97%A5%E5%BF%97/dc0655dbcb916cbd1a89395ba14ef529.jpeg" alt="alt text" title="本人,实在是太唐了🥲"><br>😇😇😇</p><h2 id="7-13"><a href="#7-13" class="headerlink" title="7-13"></a>7-13</h2><p>今天给孩子们放了《哈尔的移动城堡》，宫崎骏一部非常有名的电影，宫崎骏给孩子们带来了爱和勇气等等好的品质，我也希望孩子们能够在将来也能够具备这样的品质</p><h2 id="7-15"><a href="#7-15" class="headerlink" title="7-15"></a>7-15</h2><p>今天继续给孩子们放《哈尔的移动城堡》不得不说，我感觉我在班上已经是小有名气了，今天发生了一件尴尬的事情就是，我早上走的太急，衣服穿反了，还被孩子们提醒，我出了丑，<br>唉，也真是，我都已经19岁了，却还是如此的丢三落四的，哈哈。</p><h2 id="7-16"><a href="#7-16" class="headerlink" title="7-16"></a>7-16</h2><p>今天支教队的大家一起出去玩，我觉得还是非常开心的！</p><h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><p>我们尝了富顺县最有名的富顺豆花，<br><img src="/2024/07/17/%E6%94%AF%E6%95%99%E6%97%A5%E5%BF%97/a845605f56152ea366776b0772781ee5.jpeg" alt="alt text" title="不知道你觉得这个豆花如何呢？"></p><h3 id="下午玩游戏"><a href="#下午玩游戏" class="headerlink" title="下午玩游戏"></a>下午玩游戏</h3><p>下午和队员一起在主机店打了一下午游戏，好久没有这么开心过了，<br>我印象比较深的其中有几个游戏是马里奥的大乱斗，队长非常洋洋自得的虐了我们好几局，后面打的我急了，我只能说：“懒得喷！”<br>还有一个很好玩的游戏叫做胡闹厨房，其实就是几个小人在这里忙来忙去，为了做菜，是一个考验团队配合的游戏，我感觉还是挺好玩的，后面我们几个玩的哈哈大笑。</p><p><img src="/2024/07/17/%E6%94%AF%E6%95%99%E6%97%A5%E5%BF%97/e4b6ceca651719a6b68a21cf5f87c3f6.jpeg" alt="alt text" title="就是这个游戏，我被暴打，气死我了"></p><h3 id="趣事"><a href="#趣事" class="headerlink" title="趣事"></a>趣事</h3><p>后面我们还打了台球，奈何本人技术太烂，被刘艺晗给暴打了</p><h3 id="晚饭"><a href="#晚饭" class="headerlink" title="晚饭"></a>晚饭</h3><p>晚饭还是非常不错的，大家在我的提议下最后吃了自助烤肉，好久没有吃的这么幸福了！</p><p><img src="/2024/07/17/%E6%94%AF%E6%95%99%E6%97%A5%E5%BF%97/60aff759c93e0797b155062426ca116a.jpeg" title="本人是个好吃嘴，就放个吃的图片吧"><br>🥰</p><h2 id="7-17"><a href="#7-17" class="headerlink" title="7-17"></a>7-17</h2><h3 id="今日课堂"><a href="#今日课堂" class="headerlink" title="今日课堂"></a>今日课堂</h3><p>今天给初中放了夏日大作战，怎么说呢，我认为这个年龄段的学生，其实对于异性还是有着很多的幻想，我选了这样一部片子，我希望大家还是可以在课堂上多收获一些快乐，记得有个伟人说过，教育就是多年之后，知识都忘之后，剩下的东西，我希望我可以给同学一种独特的体验。</p><p>ps：今天给同学们做调查问卷的时候，有两个同学都喜欢我的课，开心！</p><h2 id="7-18"><a href="#7-18" class="headerlink" title="7-18"></a>7-18</h2><h3 id="今日课堂-1"><a href="#今日课堂-1" class="headerlink" title="今日课堂"></a>今日课堂</h3><p>今天把调查问卷收上来的时候，特别的惊喜，居然同学们最喜欢的两个课分别是硬笔书法和动漫鉴赏，我貌似成为了小学班上的明星人物，好开心！<br>还有两天就回到成都了，这几天过得真快啊！</p><h2 id="7-19"><a href="#7-19" class="headerlink" title="7-19"></a>7-19</h2><h3 id="今日"><a href="#今日" class="headerlink" title="今日"></a>今日</h3><p>早上起来发现本以为自己是第三节课，到了之后才发现是第二节课，把我吓了一跳，还好我的课被副队拿去排练了，不然就是教学事故了</p><h2 id="7-20"><a href="#7-20" class="headerlink" title="7-20"></a>7-20</h2><h3 id="敬老院"><a href="#敬老院" class="headerlink" title="敬老院"></a>敬老院</h3><p>今日在敬老院我们进行了演出，给老人们带来了我们的关爱，我相信，我们的做的一切，都是有意义的！<br>这十天的生涯也结束了，这真是一段难忘的经历</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;支教日志&quot;&gt;&lt;a href=&quot;#支教日志&quot; class=&quot;headerlink&quot; title=&quot;支教日志&quot;&gt;&lt;/a&gt;支教日志&lt;/h1&gt;&lt;h2 id=&quot;7-10&quot;&gt;&lt;a href=&quot;#7-10&quot; class=&quot;headerlink&quot; title=&quot;7-10&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>GPIO输入</title>
    <link href="https://jiyexingzou.github.io/2024/07/17/GPIO%E8%BE%93%E5%85%A5/"/>
    <id>https://jiyexingzou.github.io/2024/07/17/GPIO%E8%BE%93%E5%85%A5/</id>
    <published>2024-07-17T08:29:37.000Z</published>
    <updated>2024-08-03T06:19:41.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本节课目标"><a href="#本节课目标" class="headerlink" title="本节课目标"></a>本节课目标</h2><ol><li>按键控制LED </li><li>光敏传感器控制蜂鸣器</li></ol><p>C语言数据类型<br>typedef<br>宏定义<br>指针</p><p>###按键介绍<br><img src="/2024/07/17/GPIO%E8%BE%93%E5%85%A5/image-8.png" alt="alt text"></p><p>处理按键抖动的方法：对于按键抖动进行过滤</p><h3 id="传感器模块介绍"><a href="#传感器模块介绍" class="headerlink" title="传感器模块介绍"></a>传感器模块介绍</h3><p><strong>光敏电阻传感器</strong><br><strong>热敏电阻传感器</strong><br><strong>对射式红外传感器</strong><br><strong>反射式红外传感器</strong></p><p><img src="/2024/07/17/GPIO%E8%BE%93%E5%85%A5/image.png" alt="alt text"></p><h3 id="硬件电路"><a href="#硬件电路" class="headerlink" title="硬件电路"></a>硬件电路</h3><p><img src="/2024/07/17/GPIO%E8%BE%93%E5%85%A5/image-1.png" alt="alt text"></p><h2 id="C语言部分学习"><a href="#C语言部分学习" class="headerlink" title="C语言部分学习"></a>C语言部分学习</h2><h3 id="c语言数据类型"><a href="#c语言数据类型" class="headerlink" title="c语言数据类型"></a>c语言数据类型</h3><p><img src="/2024/07/17/GPIO%E8%BE%93%E5%85%A5/image-2.png" alt="alt text"></p><p>注意stdint关键字，ST关键字</p><p>c语言宏定义</p><p>typedef 只针对于变量类型<br>更安全 </p><p>区别</p><p>结构体:<br>组合不同的结构类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">struct</span>&#123;</span><span class="type">char</span> x;<span class="type">int</span> y;<span class="type">float</span> z;&#125; c;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>枚举</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span>&#123;</span>M =<span class="number">1</span>; T = <span class="number">2</span>; W = <span class="number">3</span>&#125; week; <span class="comment">//顺序值，可以不写=2,=3</span></span><br><span class="line">    </span><br><span class="line">    week = M;</span><br><span class="line">    week = <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    print</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在给定的参数里面赋值</p><p>枚举也是一个宏定义的集合</p><p>#3.4按键控制LED<br>使用的接法，第一种<br><img src="/2024/07/17/GPIO%E8%BE%93%E5%85%A5/image-3.png" alt="alt text"></p><p>模块化编程的方式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;本节课目标&quot;&gt;&lt;a href=&quot;#本节课目标&quot; class=&quot;headerlink&quot; title=&quot;本节课目标&quot;&gt;&lt;/a&gt;本节课目标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;按键控制LED &lt;/li&gt;
&lt;li&gt;光敏传感器控制蜂鸣器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;C语言数据类型&lt;b</summary>
      
    
    
    
    
  </entry>
  
</feed>
